// Code generated by Kitex v0.6.2. DO NOT EDIT.

package favoriteservice

import (
	"context"
	favorite "douyin/kitex_gen/favorite"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return favoriteServiceServiceInfo
}

var favoriteServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "FavoriteService"
	handlerType := (*favorite.FavoriteService)(nil)
	methods := map[string]kitex.MethodInfo{
		"FavoriteAction":        kitex.NewMethodInfo(favoriteActionHandler, newFavoriteServiceFavoriteActionArgs, newFavoriteServiceFavoriteActionResult, false),
		"GetFavoriteList":       kitex.NewMethodInfo(getFavoriteListHandler, newFavoriteServiceGetFavoriteListArgs, newFavoriteServiceGetFavoriteListResult, false),
		"GetVideoFavoriteCount": kitex.NewMethodInfo(getVideoFavoriteCountHandler, newFavoriteServiceGetVideoFavoriteCountArgs, newFavoriteServiceGetVideoFavoriteCountResult, false),
		"GetUserFavoriteCount":  kitex.NewMethodInfo(getUserFavoriteCountHandler, newFavoriteServiceGetUserFavoriteCountArgs, newFavoriteServiceGetUserFavoriteCountResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "favorite",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.6.2",
		Extra:           extra,
	}
	return svcInfo
}

func favoriteActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*favorite.FavoriteServiceFavoriteActionArgs)
	realResult := result.(*favorite.FavoriteServiceFavoriteActionResult)
	success, err := handler.(favorite.FavoriteService).FavoriteAction(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFavoriteServiceFavoriteActionArgs() interface{} {
	return favorite.NewFavoriteServiceFavoriteActionArgs()
}

func newFavoriteServiceFavoriteActionResult() interface{} {
	return favorite.NewFavoriteServiceFavoriteActionResult()
}

func getFavoriteListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*favorite.FavoriteServiceGetFavoriteListArgs)
	realResult := result.(*favorite.FavoriteServiceGetFavoriteListResult)
	success, err := handler.(favorite.FavoriteService).GetFavoriteList(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFavoriteServiceGetFavoriteListArgs() interface{} {
	return favorite.NewFavoriteServiceGetFavoriteListArgs()
}

func newFavoriteServiceGetFavoriteListResult() interface{} {
	return favorite.NewFavoriteServiceGetFavoriteListResult()
}

func getVideoFavoriteCountHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*favorite.FavoriteServiceGetVideoFavoriteCountArgs)
	realResult := result.(*favorite.FavoriteServiceGetVideoFavoriteCountResult)
	success, err := handler.(favorite.FavoriteService).GetVideoFavoriteCount(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFavoriteServiceGetVideoFavoriteCountArgs() interface{} {
	return favorite.NewFavoriteServiceGetVideoFavoriteCountArgs()
}

func newFavoriteServiceGetVideoFavoriteCountResult() interface{} {
	return favorite.NewFavoriteServiceGetVideoFavoriteCountResult()
}

func getUserFavoriteCountHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*favorite.FavoriteServiceGetUserFavoriteCountArgs)
	realResult := result.(*favorite.FavoriteServiceGetUserFavoriteCountResult)
	success, err := handler.(favorite.FavoriteService).GetUserFavoriteCount(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFavoriteServiceGetUserFavoriteCountArgs() interface{} {
	return favorite.NewFavoriteServiceGetUserFavoriteCountArgs()
}

func newFavoriteServiceGetUserFavoriteCountResult() interface{} {
	return favorite.NewFavoriteServiceGetUserFavoriteCountResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) FavoriteAction(ctx context.Context, request *favorite.FavoriteActionRequest) (r *favorite.FavoriteActionResponse, err error) {
	var _args favorite.FavoriteServiceFavoriteActionArgs
	_args.Request = request
	var _result favorite.FavoriteServiceFavoriteActionResult
	if err = p.c.Call(ctx, "FavoriteAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFavoriteList(ctx context.Context, request *favorite.FavoriteListRequest) (r *favorite.FavoriteListResponse, err error) {
	var _args favorite.FavoriteServiceGetFavoriteListArgs
	_args.Request = request
	var _result favorite.FavoriteServiceGetFavoriteListResult
	if err = p.c.Call(ctx, "GetFavoriteList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetVideoFavoriteCount(ctx context.Context, request *favorite.VideoFavoriteCountRequest) (r *favorite.VideoFavoriteCountResponse, err error) {
	var _args favorite.FavoriteServiceGetVideoFavoriteCountArgs
	_args.Request = request
	var _result favorite.FavoriteServiceGetVideoFavoriteCountResult
	if err = p.c.Call(ctx, "GetVideoFavoriteCount", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUserFavoriteCount(ctx context.Context, request *favorite.UserFavoriteCountRequest) (r *favorite.UserFavoriteCountResponse, err error) {
	var _args favorite.FavoriteServiceGetUserFavoriteCountArgs
	_args.Request = request
	var _result favorite.FavoriteServiceGetUserFavoriteCountResult
	if err = p.c.Call(ctx, "GetUserFavoriteCount", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
